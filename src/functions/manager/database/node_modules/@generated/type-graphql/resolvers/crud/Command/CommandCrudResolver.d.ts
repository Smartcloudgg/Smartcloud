import { GraphQLResolveInfo } from "graphql";
import { AggregateCommandArgs } from "./args/AggregateCommandArgs";
import { CreateCommandArgs } from "./args/CreateCommandArgs";
import { DeleteCommandArgs } from "./args/DeleteCommandArgs";
import { DeleteManyCommandArgs } from "./args/DeleteManyCommandArgs";
import { FindFirstCommandArgs } from "./args/FindFirstCommandArgs";
import { FindManyCommandArgs } from "./args/FindManyCommandArgs";
import { FindUniqueCommandArgs } from "./args/FindUniqueCommandArgs";
import { UpdateCommandArgs } from "./args/UpdateCommandArgs";
import { UpdateManyCommandArgs } from "./args/UpdateManyCommandArgs";
import { UpsertCommandArgs } from "./args/UpsertCommandArgs";
import { Command } from "../../../models/Command";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCommand } from "../../outputs/AggregateCommand";
export declare class CommandCrudResolver {
    command(ctx: any, args: FindUniqueCommandArgs): Promise<Command | null>;
    findFirstCommand(ctx: any, args: FindFirstCommandArgs): Promise<Command | null>;
    commands(ctx: any, args: FindManyCommandArgs): Promise<Command[]>;
    createCommand(ctx: any, args: CreateCommandArgs): Promise<Command>;
    deleteCommand(ctx: any, args: DeleteCommandArgs): Promise<Command | null>;
    updateCommand(ctx: any, args: UpdateCommandArgs): Promise<Command | null>;
    deleteManyCommand(ctx: any, args: DeleteManyCommandArgs): Promise<AffectedRowsOutput>;
    updateManyCommand(ctx: any, args: UpdateManyCommandArgs): Promise<AffectedRowsOutput>;
    upsertCommand(ctx: any, args: UpsertCommandArgs): Promise<Command>;
    aggregateCommand(ctx: any, info: GraphQLResolveInfo, args: AggregateCommandArgs): Promise<AggregateCommand>;
}
