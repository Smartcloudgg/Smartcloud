import { GraphQLResolveInfo } from "graphql";
import { AggregateDiscordUserArgs } from "./args/AggregateDiscordUserArgs";
import { CreateDiscordUserArgs } from "./args/CreateDiscordUserArgs";
import { DeleteDiscordUserArgs } from "./args/DeleteDiscordUserArgs";
import { DeleteManyDiscordUserArgs } from "./args/DeleteManyDiscordUserArgs";
import { FindFirstDiscordUserArgs } from "./args/FindFirstDiscordUserArgs";
import { FindManyDiscordUserArgs } from "./args/FindManyDiscordUserArgs";
import { FindUniqueDiscordUserArgs } from "./args/FindUniqueDiscordUserArgs";
import { UpdateDiscordUserArgs } from "./args/UpdateDiscordUserArgs";
import { UpdateManyDiscordUserArgs } from "./args/UpdateManyDiscordUserArgs";
import { UpsertDiscordUserArgs } from "./args/UpsertDiscordUserArgs";
import { DiscordUser } from "../../../models/DiscordUser";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateDiscordUser } from "../../outputs/AggregateDiscordUser";
export declare class DiscordUserCrudResolver {
    discordUser(ctx: any, args: FindUniqueDiscordUserArgs): Promise<DiscordUser | null>;
    findFirstDiscordUser(ctx: any, args: FindFirstDiscordUserArgs): Promise<DiscordUser | null>;
    discordUsers(ctx: any, args: FindManyDiscordUserArgs): Promise<DiscordUser[]>;
    createDiscordUser(ctx: any, args: CreateDiscordUserArgs): Promise<DiscordUser>;
    deleteDiscordUser(ctx: any, args: DeleteDiscordUserArgs): Promise<DiscordUser | null>;
    updateDiscordUser(ctx: any, args: UpdateDiscordUserArgs): Promise<DiscordUser | null>;
    deleteManyDiscordUser(ctx: any, args: DeleteManyDiscordUserArgs): Promise<AffectedRowsOutput>;
    updateManyDiscordUser(ctx: any, args: UpdateManyDiscordUserArgs): Promise<AffectedRowsOutput>;
    upsertDiscordUser(ctx: any, args: UpsertDiscordUserArgs): Promise<DiscordUser>;
    aggregateDiscordUser(ctx: any, info: GraphQLResolveInfo, args: AggregateDiscordUserArgs): Promise<AggregateDiscordUser>;
}
