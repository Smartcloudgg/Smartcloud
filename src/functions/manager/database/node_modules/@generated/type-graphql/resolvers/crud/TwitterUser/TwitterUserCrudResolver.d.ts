import { GraphQLResolveInfo } from "graphql";
import { AggregateTwitterUserArgs } from "./args/AggregateTwitterUserArgs";
import { CreateTwitterUserArgs } from "./args/CreateTwitterUserArgs";
import { DeleteManyTwitterUserArgs } from "./args/DeleteManyTwitterUserArgs";
import { DeleteTwitterUserArgs } from "./args/DeleteTwitterUserArgs";
import { FindFirstTwitterUserArgs } from "./args/FindFirstTwitterUserArgs";
import { FindManyTwitterUserArgs } from "./args/FindManyTwitterUserArgs";
import { FindUniqueTwitterUserArgs } from "./args/FindUniqueTwitterUserArgs";
import { UpdateManyTwitterUserArgs } from "./args/UpdateManyTwitterUserArgs";
import { UpdateTwitterUserArgs } from "./args/UpdateTwitterUserArgs";
import { UpsertTwitterUserArgs } from "./args/UpsertTwitterUserArgs";
import { TwitterUser } from "../../../models/TwitterUser";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTwitterUser } from "../../outputs/AggregateTwitterUser";
export declare class TwitterUserCrudResolver {
    twitterUser(ctx: any, args: FindUniqueTwitterUserArgs): Promise<TwitterUser | null>;
    findFirstTwitterUser(ctx: any, args: FindFirstTwitterUserArgs): Promise<TwitterUser | null>;
    twitterUsers(ctx: any, args: FindManyTwitterUserArgs): Promise<TwitterUser[]>;
    createTwitterUser(ctx: any, args: CreateTwitterUserArgs): Promise<TwitterUser>;
    deleteTwitterUser(ctx: any, args: DeleteTwitterUserArgs): Promise<TwitterUser | null>;
    updateTwitterUser(ctx: any, args: UpdateTwitterUserArgs): Promise<TwitterUser | null>;
    deleteManyTwitterUser(ctx: any, args: DeleteManyTwitterUserArgs): Promise<AffectedRowsOutput>;
    updateManyTwitterUser(ctx: any, args: UpdateManyTwitterUserArgs): Promise<AffectedRowsOutput>;
    upsertTwitterUser(ctx: any, args: UpsertTwitterUserArgs): Promise<TwitterUser>;
    aggregateTwitterUser(ctx: any, info: GraphQLResolveInfo, args: AggregateTwitterUserArgs): Promise<AggregateTwitterUser>;
}
