import { GraphQLResolveInfo } from "graphql";
import { AggregateManagerArgs } from "./args/AggregateManagerArgs";
import { CreateManagerArgs } from "./args/CreateManagerArgs";
import { DeleteManagerArgs } from "./args/DeleteManagerArgs";
import { DeleteManyManagerArgs } from "./args/DeleteManyManagerArgs";
import { FindFirstManagerArgs } from "./args/FindFirstManagerArgs";
import { FindManyManagerArgs } from "./args/FindManyManagerArgs";
import { FindUniqueManagerArgs } from "./args/FindUniqueManagerArgs";
import { UpdateManagerArgs } from "./args/UpdateManagerArgs";
import { UpdateManyManagerArgs } from "./args/UpdateManyManagerArgs";
import { UpsertManagerArgs } from "./args/UpsertManagerArgs";
import { Manager } from "../../../models/Manager";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateManager } from "../../outputs/AggregateManager";
export declare class ManagerCrudResolver {
    manager(ctx: any, args: FindUniqueManagerArgs): Promise<Manager | null>;
    findFirstManager(ctx: any, args: FindFirstManagerArgs): Promise<Manager | null>;
    managers(ctx: any, args: FindManyManagerArgs): Promise<Manager[]>;
    createManager(ctx: any, args: CreateManagerArgs): Promise<Manager>;
    deleteManager(ctx: any, args: DeleteManagerArgs): Promise<Manager | null>;
    updateManager(ctx: any, args: UpdateManagerArgs): Promise<Manager | null>;
    deleteManyManager(ctx: any, args: DeleteManyManagerArgs): Promise<AffectedRowsOutput>;
    updateManyManager(ctx: any, args: UpdateManyManagerArgs): Promise<AffectedRowsOutput>;
    upsertManager(ctx: any, args: UpsertManagerArgs): Promise<Manager>;
    aggregateManager(ctx: any, info: GraphQLResolveInfo, args: AggregateManagerArgs): Promise<AggregateManager>;
}
