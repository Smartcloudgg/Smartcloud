import { GraphQLResolveInfo } from "graphql";
import { AggregateActionArgs } from "./args/AggregateActionArgs";
import { CreateActionArgs } from "./args/CreateActionArgs";
import { DeleteActionArgs } from "./args/DeleteActionArgs";
import { DeleteManyActionArgs } from "./args/DeleteManyActionArgs";
import { FindFirstActionArgs } from "./args/FindFirstActionArgs";
import { FindManyActionArgs } from "./args/FindManyActionArgs";
import { FindUniqueActionArgs } from "./args/FindUniqueActionArgs";
import { UpdateActionArgs } from "./args/UpdateActionArgs";
import { UpdateManyActionArgs } from "./args/UpdateManyActionArgs";
import { UpsertActionArgs } from "./args/UpsertActionArgs";
import { Action } from "../../../models/Action";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateAction } from "../../outputs/AggregateAction";
export declare class ActionCrudResolver {
    action(ctx: any, args: FindUniqueActionArgs): Promise<Action | null>;
    findFirstAction(ctx: any, args: FindFirstActionArgs): Promise<Action | null>;
    actions(ctx: any, args: FindManyActionArgs): Promise<Action[]>;
    createAction(ctx: any, args: CreateActionArgs): Promise<Action>;
    deleteAction(ctx: any, args: DeleteActionArgs): Promise<Action | null>;
    updateAction(ctx: any, args: UpdateActionArgs): Promise<Action | null>;
    deleteManyAction(ctx: any, args: DeleteManyActionArgs): Promise<AffectedRowsOutput>;
    updateManyAction(ctx: any, args: UpdateManyActionArgs): Promise<AffectedRowsOutput>;
    upsertAction(ctx: any, args: UpsertActionArgs): Promise<Action>;
    aggregateAction(ctx: any, info: GraphQLResolveInfo, args: AggregateActionArgs): Promise<AggregateAction>;
}
