import { GraphQLResolveInfo } from "graphql";
import { AggregateShardArgs } from "./args/AggregateShardArgs";
import { CreateShardArgs } from "./args/CreateShardArgs";
import { DeleteManyShardArgs } from "./args/DeleteManyShardArgs";
import { DeleteShardArgs } from "./args/DeleteShardArgs";
import { FindFirstShardArgs } from "./args/FindFirstShardArgs";
import { FindManyShardArgs } from "./args/FindManyShardArgs";
import { FindUniqueShardArgs } from "./args/FindUniqueShardArgs";
import { UpdateManyShardArgs } from "./args/UpdateManyShardArgs";
import { UpdateShardArgs } from "./args/UpdateShardArgs";
import { UpsertShardArgs } from "./args/UpsertShardArgs";
import { Shard } from "../../../models/Shard";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateShard } from "../../outputs/AggregateShard";
export declare class ShardCrudResolver {
    shard(ctx: any, args: FindUniqueShardArgs): Promise<Shard | null>;
    findFirstShard(ctx: any, args: FindFirstShardArgs): Promise<Shard | null>;
    shards(ctx: any, args: FindManyShardArgs): Promise<Shard[]>;
    createShard(ctx: any, args: CreateShardArgs): Promise<Shard>;
    deleteShard(ctx: any, args: DeleteShardArgs): Promise<Shard | null>;
    updateShard(ctx: any, args: UpdateShardArgs): Promise<Shard | null>;
    deleteManyShard(ctx: any, args: DeleteManyShardArgs): Promise<AffectedRowsOutput>;
    updateManyShard(ctx: any, args: UpdateManyShardArgs): Promise<AffectedRowsOutput>;
    upsertShard(ctx: any, args: UpsertShardArgs): Promise<Shard>;
    aggregateShard(ctx: any, info: GraphQLResolveInfo, args: AggregateShardArgs): Promise<AggregateShard>;
}
