import { GraphQLResolveInfo } from "graphql";
import { AggregateGuildArgs } from "./args/AggregateGuildArgs";
import { CreateGuildArgs } from "./args/CreateGuildArgs";
import { DeleteGuildArgs } from "./args/DeleteGuildArgs";
import { DeleteManyGuildArgs } from "./args/DeleteManyGuildArgs";
import { FindFirstGuildArgs } from "./args/FindFirstGuildArgs";
import { FindManyGuildArgs } from "./args/FindManyGuildArgs";
import { FindUniqueGuildArgs } from "./args/FindUniqueGuildArgs";
import { UpdateGuildArgs } from "./args/UpdateGuildArgs";
import { UpdateManyGuildArgs } from "./args/UpdateManyGuildArgs";
import { UpsertGuildArgs } from "./args/UpsertGuildArgs";
import { Guild } from "../../../models/Guild";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateGuild } from "../../outputs/AggregateGuild";
export declare class GuildCrudResolver {
    guild(ctx: any, args: FindUniqueGuildArgs): Promise<Guild | null>;
    findFirstGuild(ctx: any, args: FindFirstGuildArgs): Promise<Guild | null>;
    guilds(ctx: any, args: FindManyGuildArgs): Promise<Guild[]>;
    createGuild(ctx: any, args: CreateGuildArgs): Promise<Guild>;
    deleteGuild(ctx: any, args: DeleteGuildArgs): Promise<Guild | null>;
    updateGuild(ctx: any, args: UpdateGuildArgs): Promise<Guild | null>;
    deleteManyGuild(ctx: any, args: DeleteManyGuildArgs): Promise<AffectedRowsOutput>;
    updateManyGuild(ctx: any, args: UpdateManyGuildArgs): Promise<AffectedRowsOutput>;
    upsertGuild(ctx: any, args: UpsertGuildArgs): Promise<Guild>;
    aggregateGuild(ctx: any, info: GraphQLResolveInfo, args: AggregateGuildArgs): Promise<AggregateGuild>;
}
