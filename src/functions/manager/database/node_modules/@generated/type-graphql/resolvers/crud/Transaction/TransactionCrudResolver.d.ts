import { GraphQLResolveInfo } from "graphql";
import { AggregateTransactionArgs } from "./args/AggregateTransactionArgs";
import { CreateTransactionArgs } from "./args/CreateTransactionArgs";
import { DeleteManyTransactionArgs } from "./args/DeleteManyTransactionArgs";
import { DeleteTransactionArgs } from "./args/DeleteTransactionArgs";
import { FindFirstTransactionArgs } from "./args/FindFirstTransactionArgs";
import { FindManyTransactionArgs } from "./args/FindManyTransactionArgs";
import { FindUniqueTransactionArgs } from "./args/FindUniqueTransactionArgs";
import { UpdateManyTransactionArgs } from "./args/UpdateManyTransactionArgs";
import { UpdateTransactionArgs } from "./args/UpdateTransactionArgs";
import { UpsertTransactionArgs } from "./args/UpsertTransactionArgs";
import { Transaction } from "../../../models/Transaction";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTransaction } from "../../outputs/AggregateTransaction";
export declare class TransactionCrudResolver {
    transaction(ctx: any, args: FindUniqueTransactionArgs): Promise<Transaction | null>;
    findFirstTransaction(ctx: any, args: FindFirstTransactionArgs): Promise<Transaction | null>;
    transactions(ctx: any, args: FindManyTransactionArgs): Promise<Transaction[]>;
    createTransaction(ctx: any, args: CreateTransactionArgs): Promise<Transaction>;
    deleteTransaction(ctx: any, args: DeleteTransactionArgs): Promise<Transaction | null>;
    updateTransaction(ctx: any, args: UpdateTransactionArgs): Promise<Transaction | null>;
    deleteManyTransaction(ctx: any, args: DeleteManyTransactionArgs): Promise<AffectedRowsOutput>;
    updateManyTransaction(ctx: any, args: UpdateManyTransactionArgs): Promise<AffectedRowsOutput>;
    upsertTransaction(ctx: any, args: UpsertTransactionArgs): Promise<Transaction>;
    aggregateTransaction(ctx: any, info: GraphQLResolveInfo, args: AggregateTransactionArgs): Promise<AggregateTransaction>;
}
