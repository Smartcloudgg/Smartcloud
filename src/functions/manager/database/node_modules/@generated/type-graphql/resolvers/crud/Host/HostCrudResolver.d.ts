import { GraphQLResolveInfo } from "graphql";
import { AggregateHostArgs } from "./args/AggregateHostArgs";
import { CreateHostArgs } from "./args/CreateHostArgs";
import { DeleteHostArgs } from "./args/DeleteHostArgs";
import { DeleteManyHostArgs } from "./args/DeleteManyHostArgs";
import { FindFirstHostArgs } from "./args/FindFirstHostArgs";
import { FindManyHostArgs } from "./args/FindManyHostArgs";
import { FindUniqueHostArgs } from "./args/FindUniqueHostArgs";
import { UpdateHostArgs } from "./args/UpdateHostArgs";
import { UpdateManyHostArgs } from "./args/UpdateManyHostArgs";
import { UpsertHostArgs } from "./args/UpsertHostArgs";
import { Host } from "../../../models/Host";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateHost } from "../../outputs/AggregateHost";
export declare class HostCrudResolver {
    host(ctx: any, args: FindUniqueHostArgs): Promise<Host | null>;
    findFirstHost(ctx: any, args: FindFirstHostArgs): Promise<Host | null>;
    hosts(ctx: any, args: FindManyHostArgs): Promise<Host[]>;
    createHost(ctx: any, args: CreateHostArgs): Promise<Host>;
    deleteHost(ctx: any, args: DeleteHostArgs): Promise<Host | null>;
    updateHost(ctx: any, args: UpdateHostArgs): Promise<Host | null>;
    deleteManyHost(ctx: any, args: DeleteManyHostArgs): Promise<AffectedRowsOutput>;
    updateManyHost(ctx: any, args: UpdateManyHostArgs): Promise<AffectedRowsOutput>;
    upsertHost(ctx: any, args: UpsertHostArgs): Promise<Host>;
    aggregateHost(ctx: any, info: GraphQLResolveInfo, args: AggregateHostArgs): Promise<AggregateHost>;
}
