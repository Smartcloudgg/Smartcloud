import { GraphQLResolveInfo } from "graphql";
import { AggregateTwitchAuthArgs } from "./args/AggregateTwitchAuthArgs";
import { CreateTwitchAuthArgs } from "./args/CreateTwitchAuthArgs";
import { DeleteManyTwitchAuthArgs } from "./args/DeleteManyTwitchAuthArgs";
import { DeleteTwitchAuthArgs } from "./args/DeleteTwitchAuthArgs";
import { FindFirstTwitchAuthArgs } from "./args/FindFirstTwitchAuthArgs";
import { FindManyTwitchAuthArgs } from "./args/FindManyTwitchAuthArgs";
import { FindUniqueTwitchAuthArgs } from "./args/FindUniqueTwitchAuthArgs";
import { UpdateManyTwitchAuthArgs } from "./args/UpdateManyTwitchAuthArgs";
import { UpdateTwitchAuthArgs } from "./args/UpdateTwitchAuthArgs";
import { UpsertTwitchAuthArgs } from "./args/UpsertTwitchAuthArgs";
import { TwitchAuth } from "../../../models/TwitchAuth";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTwitchAuth } from "../../outputs/AggregateTwitchAuth";
export declare class TwitchAuthCrudResolver {
    twitchAuth(ctx: any, args: FindUniqueTwitchAuthArgs): Promise<TwitchAuth | null>;
    findFirstTwitchAuth(ctx: any, args: FindFirstTwitchAuthArgs): Promise<TwitchAuth | null>;
    twitchAuths(ctx: any, args: FindManyTwitchAuthArgs): Promise<TwitchAuth[]>;
    createTwitchAuth(ctx: any, args: CreateTwitchAuthArgs): Promise<TwitchAuth>;
    deleteTwitchAuth(ctx: any, args: DeleteTwitchAuthArgs): Promise<TwitchAuth | null>;
    updateTwitchAuth(ctx: any, args: UpdateTwitchAuthArgs): Promise<TwitchAuth | null>;
    deleteManyTwitchAuth(ctx: any, args: DeleteManyTwitchAuthArgs): Promise<AffectedRowsOutput>;
    updateManyTwitchAuth(ctx: any, args: UpdateManyTwitchAuthArgs): Promise<AffectedRowsOutput>;
    upsertTwitchAuth(ctx: any, args: UpsertTwitchAuthArgs): Promise<TwitchAuth>;
    aggregateTwitchAuth(ctx: any, info: GraphQLResolveInfo, args: AggregateTwitchAuthArgs): Promise<AggregateTwitchAuth>;
}
