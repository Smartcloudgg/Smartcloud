import { GraphQLResolveInfo } from "graphql";
import { AggregateTwitchUserArgs } from "./args/AggregateTwitchUserArgs";
import { CreateTwitchUserArgs } from "./args/CreateTwitchUserArgs";
import { DeleteManyTwitchUserArgs } from "./args/DeleteManyTwitchUserArgs";
import { DeleteTwitchUserArgs } from "./args/DeleteTwitchUserArgs";
import { FindFirstTwitchUserArgs } from "./args/FindFirstTwitchUserArgs";
import { FindManyTwitchUserArgs } from "./args/FindManyTwitchUserArgs";
import { FindUniqueTwitchUserArgs } from "./args/FindUniqueTwitchUserArgs";
import { UpdateManyTwitchUserArgs } from "./args/UpdateManyTwitchUserArgs";
import { UpdateTwitchUserArgs } from "./args/UpdateTwitchUserArgs";
import { UpsertTwitchUserArgs } from "./args/UpsertTwitchUserArgs";
import { TwitchUser } from "../../../models/TwitchUser";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTwitchUser } from "../../outputs/AggregateTwitchUser";
export declare class TwitchUserCrudResolver {
    twitchUser(ctx: any, args: FindUniqueTwitchUserArgs): Promise<TwitchUser | null>;
    findFirstTwitchUser(ctx: any, args: FindFirstTwitchUserArgs): Promise<TwitchUser | null>;
    twitchUsers(ctx: any, args: FindManyTwitchUserArgs): Promise<TwitchUser[]>;
    createTwitchUser(ctx: any, args: CreateTwitchUserArgs): Promise<TwitchUser>;
    deleteTwitchUser(ctx: any, args: DeleteTwitchUserArgs): Promise<TwitchUser | null>;
    updateTwitchUser(ctx: any, args: UpdateTwitchUserArgs): Promise<TwitchUser | null>;
    deleteManyTwitchUser(ctx: any, args: DeleteManyTwitchUserArgs): Promise<AffectedRowsOutput>;
    updateManyTwitchUser(ctx: any, args: UpdateManyTwitchUserArgs): Promise<AffectedRowsOutput>;
    upsertTwitchUser(ctx: any, args: UpsertTwitchUserArgs): Promise<TwitchUser>;
    aggregateTwitchUser(ctx: any, info: GraphQLResolveInfo, args: AggregateTwitchUserArgs): Promise<AggregateTwitchUser>;
}
